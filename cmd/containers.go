package cmd

import (
	"encoding/json"
	"fmt"

	"github.com/cristianoliveira/sway-setter/internal/parser"
	"github.com/cristianoliveira/sway-setter/internal/sway"
	"github.com/spf13/cobra"
)

func ContainersCmd() *cobra.Command {
	// sway-setter containers < tree.json
	return &cobra.Command{
		Use:   "containers <stdin>",
		Short: "Set containers from stdin - Use: `swaymsg -t get_tree`",
		RunE: func(cmd *cobra.Command, args []string) error {
			printFlag, err := cmd.Flags().GetBool("print")
			if printFlag {
				sway.ConfigStdoutConnector()
			}

			swaymsg, err := sway.ConnectToSway()
			if err != nil {
				return err
			}

			input, err := ScanStdin()
			if err != nil {
				return err
			}

			var tree parser.SwayRoot
			err = json.Unmarshal([]byte(input), &tree)
			if err != nil {
				return fmt.Errorf("Error: no outputs found in the tree json.\nHint: make sure to use a file generated by the `swaymsg -t get_tree` output")
			}

			workspaces, err := parser.CollectWorkspaces(tree)
			if err != nil {
				return fmt.Errorf("Error: failed to collect workspaces.\nReason: %s", err)
			}

			if len(workspaces) == 0 {
				return fmt.Errorf("Error: no workspaces found in the tree json.\nHint: make sure to use a file generated by the `swaymsg -t get_tree` output")
			}

			commands, err := parser.SetContainersCommand(workspaces)
			if err != nil {
				return err
			}

			err = swaymsg.Commands(commands)
			if err != nil {
				return err
			}

			return nil
		},
	}
}
